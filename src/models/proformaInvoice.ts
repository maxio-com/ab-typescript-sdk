/**
 * Maxio Advanced Billing formerly Chargify APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';
import { InvoiceAddress, invoiceAddressSchema } from './invoiceAddress';
import { InvoiceSeller, invoiceSellerSchema } from './invoiceSeller';
import { ProformaCustomer, proformaCustomerSchema } from './proformaCustomer';
import {
  ProformaInvoiceLineItem,
  proformaInvoiceLineItemSchema,
} from './proformaInvoiceLineItem';

export interface ProformaInvoice {
  uid?: string;
  siteId?: number;
  customerId?: number;
  subscriptionId?: number;
  number?: number;
  sequenceNumber?: number;
  createdAt?: string;
  deliveryDate?: string;
  status?: string;
  collectionMethod?: string;
  paymentInstructions?: string;
  currency?: string;
  consolidationLevel?: string;
  productName?: string;
  productFamilyName?: string;
  role?: string;
  /** Information about the seller (merchant) listed on the masthead of the invoice. */
  seller?: InvoiceSeller;
  customer?: ProformaCustomer;
  memo?: string;
  billingAddress?: InvoiceAddress;
  shippingAddress?: InvoiceAddress;
  subtotalAmount?: string;
  discountAmount?: string;
  taxAmount?: string;
  totalAmount?: string;
  creditAmount?: string;
  paidAmount?: string;
  refundAmount?: string;
  dueAmount?: string;
  lineItems?: ProformaInvoiceLineItem[];
  discounts?: unknown[];
  taxes?: unknown[];
  credits?: unknown[];
  payments?: unknown[];
  customFields?: unknown[];
  publicUrl?: string;
}

export const proformaInvoiceSchema: Schema<ProformaInvoice> = object({
  uid: ['uid', optional(string())],
  siteId: ['site_id', optional(number())],
  customerId: ['customer_id', optional(number())],
  subscriptionId: ['subscription_id', optional(number())],
  number: ['number', optional(number())],
  sequenceNumber: ['sequence_number', optional(number())],
  createdAt: ['created_at', optional(string())],
  deliveryDate: ['delivery_date', optional(string())],
  status: ['status', optional(string())],
  collectionMethod: ['collection_method', optional(string())],
  paymentInstructions: ['payment_instructions', optional(string())],
  currency: ['currency', optional(string())],
  consolidationLevel: ['consolidation_level', optional(string())],
  productName: ['product_name', optional(string())],
  productFamilyName: ['product_family_name', optional(string())],
  role: ['role', optional(string())],
  seller: ['seller', optional(lazy(() => invoiceSellerSchema))],
  customer: ['customer', optional(lazy(() => proformaCustomerSchema))],
  memo: ['memo', optional(string())],
  billingAddress: [
    'billing_address',
    optional(lazy(() => invoiceAddressSchema)),
  ],
  shippingAddress: [
    'shipping_address',
    optional(lazy(() => invoiceAddressSchema)),
  ],
  subtotalAmount: ['subtotal_amount', optional(string())],
  discountAmount: ['discount_amount', optional(string())],
  taxAmount: ['tax_amount', optional(string())],
  totalAmount: ['total_amount', optional(string())],
  creditAmount: ['credit_amount', optional(string())],
  paidAmount: ['paid_amount', optional(string())],
  refundAmount: ['refund_amount', optional(string())],
  dueAmount: ['due_amount', optional(string())],
  lineItems: [
    'line_items',
    optional(array(lazy(() => proformaInvoiceLineItemSchema))),
  ],
  discounts: ['discounts', optional(array(unknown()))],
  taxes: ['taxes', optional(array(unknown()))],
  credits: ['credits', optional(array(unknown()))],
  payments: ['payments', optional(array(unknown()))],
  customFields: ['custom_fields', optional(array(unknown()))],
  publicUrl: ['public_url', optional(string())],
});
